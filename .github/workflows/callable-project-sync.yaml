name: Add items to Org Project
on:
  workflow_call:
    inputs:
      destination_org:
        description: Org that owns the Project v2
        required: true
        type: string
      project_number:
        description: Project number in DESTINATION_ORG (e.g., /orgs/DESTINATION_ORG/projects/5)
        required: true
        type: number
      filter_labels:
        description: "Comma-separated label allowlist (optional)"
        required: false
        type: string
      label_operator:
        description: "OR or AND (default OR)"
        required: false
        type: string
    secrets:
      APP_PEM:
        required: true
      APP_ID:
        required: true
jobs:
  add:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      DESTINATION_ORG: ${{ inputs.destination_org }}
      PROJECT_NUMBER: ${{ inputs.project_number }}
      FILTER_LABELS: ${{ inputs.filter_labels }}
      LABEL_OPERATOR: ${{ inputs.label_operator || 'OR' }}
    steps:
      - name: Decide contentId from event
        id: pick
        run: |
          set -e
          CONTENT_ID=""
          EVENT="${{ github.event_name }}"
          if [ "$EVENT" = "issues" ] && [ -n "${{ github.event.issue.node_id }}" ]; then
            CONTENT_ID="${{ github.event.issue.node_id }}"
          elif [ "$EVENT" = "pull_request" ] && [ -n "${{ github.event.pull_request.node_id }}" ]; then
            CONTENT_ID="${{ github.event.pull_request.node_id }}"
          fi
          if [ -z "$CONTENT_ID" ]; then
            echo "No issue/PR node_id in this event; exiting 0."
            echo "skip=true" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "content_id=$CONTENT_ID" >> $GITHUB_OUTPUT

      - name: (Optional) label filter
        id: labelfilter
        if: steps.pick.outputs.skip != 'true' && env.FILTER_LABELS != ''
        run: |
          set -e
          WANT=$(echo "$FILTER_LABELS" | tr ',' '\n' | sed 's/^ *//;s/ *$//' | tr '\n' '|')
          WANT_RE="^($(echo "$WANT" | sed 's/|$//'))$"
          # Build set of labels on the item from event payload (works for both issues & PRs)
          labels=$(jq -r '
            .issue.labels // .pull_request.labels // [] | map(.name) | .[]
          ' <<< '${{ toJson(github.event) }}' || true)
          match_count=0
          for l in $labels; do
            if [[ "$l" =~ $WANT_RE ]]; then match_count=$((match_count+1)); fi
          done
          OP="${LABEL_OPERATOR}"
          ok="false"
          if [ "$OP" = "AND" ]; then
            need=$(echo "$FILTER_LABELS" | tr ',' '\n' | sed '/^$/d' | wc -l | tr -d ' ')
            [ "$match_count" -ge "$need" ] && ok="true"
          else
            [ "$match_count" -ge 1 ] && ok="true"
          fi
          echo "labels_ok=$ok" >> $GITHUB_OUTPUT
          if [ "$ok" != "true" ]; then
            echo "Label filter not satisfied; skipping."
          fi

      - name: Mint App token (Org A installation)
        id: appA
        if: steps.pick.outputs.skip != 'true' && (steps.labelfilter.outcome == 'skipped' || steps.labelfilter.outputs.labels_ok == 'true')
        uses: actions/create-github-app-token@v2
        with:
          app-id: ${{ secrets.APP_ID }}
          private-key: ${{ secrets.APP_PEM }}
          owner: ${{ env.DESTINATION_ORG }}

      - name: Resolve Org A Project ID
        if: steps.appA.outcome == 'success'
        env:
          GH_TOKEN: ${{ steps.appA.outputs.token }}
        run: |
          gh api graphql -f query='
            query($org:String!, $num:Int!) {
              organization(login:$org) { projectV2(number:$num){ id } }
            }' -f org="$DESTINATION_ORG" -F num="$PROJECT_NUMBER" > project.json
          echo "PROJECT_ID=$(jq -r .data.organization.projectV2.id project.json)" >> "$GITHUB_ENV"

      - name: Add item to Org A Project
        if: steps.appA.outcome == 'success'
        env:
          GH_TOKEN: ${{ steps.appA.outputs.token }}
        run: |
          gh api graphql -f query='
            mutation($p:ID!, $c:ID!) {
              addProjectV2ItemById(input:{projectId:$p, contentId:$c}) { item { id } }
            }' -f p="$PROJECT_ID" -f c="${{ steps.pick.outputs.content_id }}" || true
